[
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004. The 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:",
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity. The 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:",
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it. The 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:",
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit. The 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:",
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose. The 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:",
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising. The 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:",
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken? The 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge.  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:",
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work. The 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:",
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable. The 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:",
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things. The 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good taste\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:",
    "You are a helpful AI bot that answers questions for a user. Keep your response short and direct.\n Want to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJuly 2004(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new \nbook, \nand in reviews I keep\nnoticing words like \"provocative'' and \"controversial.'' To say\nnothing of \"idiotic.''I didn't mean to make the book controversial.  I was trying to make\nit efficient.  I didn't want to waste people's time telling them\nthings they already knew.  It's more efficient just to give them\nthe diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:\nthe suggestion that variation in wealth might not be as big a\nproblem as we think.I didn't say in the book that variation in wealth was in itself a\ngood thing.  I said in some situations it might be a sign of good\nthings.  A throbbing headache is not a good thing, but it can be\na sign of a good thing-- for example, that you're recovering\nconsciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.\n(In a society of one, they're identical.) And that\nis almost certainly a good thing: if your society has no variation\nin productivity, it's probably not because everyone is Thomas\nEdison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.\nIf you have a tribe of nomads collecting sticks for a fire, how\nmuch more productive is the best stick gatherer going to be than\nthe worst?  A factor of two?  Whereas when you hand people a complex tool\nlike a computer, the variation in what they can do with\nit is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and\nthe study he quoted was published in 1968.  But I think he\nunderestimated the variation between programmers.  He wrote about productivity in lines\nof code:  the best programmers can solve a given problem in a tenth\nthe time.  But what if the problem isn't given? In programming, as\nin many fields, the hard part isn't solving problems, but deciding\nwhat problems to solve.  Imagination is hard to measure, but\nin practice it dominates the kind of productivity that's measured\nin lines of code.Productivity varies in any field, but there are few in which it\nvaries so much.  The variation between programmers\nis so great that it becomes a difference in kind.  I don't\nthink this is something intrinsic to programming, though.  In every field,\ntechnology magnifies differences in productivity.  I think what's\nhappening in programming is just that we have a lot of technological\nleverage.  But in every field the lever is getting longer, so the\nvariation we see is something that more and more fields will see\nas time goes on.  And the success of companies, and countries, will\ndepend increasingly on how they deal with it.If variation in productivity increases with technology, then the\ncontribution of the most productive individuals will not only be\ndisproportionately large, but will actually grow with time.  When\nyou reach the point where 90% of a group's output is created by 1%\nof its members, you lose big if something (whether Viking raids,\nor central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these\nespecially productive people.  What motivates them?  What do they\nneed to do their jobs?  How do you recognize them? How do you\nget them to come and work for you?  And then of course there's the\nquestion, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about\nwhat they have in common.  Their defining quality is probably that\nthey really love to program.  Ordinary programmers write code to pay\nthe bills.  Great hackers think of it as something they do for fun,\nand which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.\nThis isn't quite true.  It is true that all they really care about\nis doing interesting work.  But if you make enough money, you get\nto work on whatever you want, and for that reason hackers are\nattracted by the idea of making really large amounts of money.\nBut as long as they still have to show up for work every day, they\ncare more about what they do there than how much they get paid for\nit.Economically, this is a fact of the greatest importance, because\nit means you don't have to pay great hackers anything like what\nthey're worth.  A great programmer might be ten or a hundred times\nas productive as an ordinary one, but he'll consider himself lucky\nto get paid three times as much.  As I'll explain later, this is\npartly because great hackers don't know how good they are.  But\nit's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.\nIn fact, that's an understatement.  Good hackers find it unbearable\nto use bad tools.  They'll simply refuse to work on projects with\nthe wrong infrastructure.At a startup I once worked for, one of the things pinned up on our\nbulletin board was an ad from IBM.  It was a picture of an AS400,\nand the headline read, I think, \"hackers despise\nit.'' [1]When you decide what infrastructure to use for a project, you're\nnot just making a technical decision.  You're also making a social\ndecision, and this may be the more important of the two.  For\nexample, if your company wants to write some software, it might\nseem a prudent choice to write it in Java.  But when you choose a\nlanguage, you're also choosing a community.  The programmers you'll\nbe able to hire to work on a Java project won't be as\nsmart as the\nones you could get to work on a project written in Python.\nAnd the quality of your hackers probably matters more than the\nlanguage you choose.  Though, frankly, the fact that good hackers\nprefer Python to Java should tell you something about the relative\nmerits of those languages.Business types prefer the most popular languages because they view\nlanguages as standards. They don't want to bet the company on\nBetamax.  The thing about languages, though, is that they're not\njust standards.  If you have to move bits over a network, by all\nmeans use TCP/IP.  But a programming language isn't just a format.\nA programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular\nlanguage.  As a standard, you couldn't wish for more.  But as a\nmedium of expression, you could do a lot better.  Of all the great\nprogrammers I can think of, I know of only one who would voluntarily\nprogram in Java.  And of all the great programmers I can think of\nwho don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.\nNot just because it's better, but because it gives them more control.\nGood hackers insist on control.  This is part of what makes them\ngood hackers:  when something's broken, they need to fix it.  You\nwant them to feel this way about the software they're writing for\nyou.  You shouldn't be surprised when they feel the same way about\nthe operating system.A couple years ago a venture capitalist friend told me about a new\nstartup he was involved with.  It sounded promising.  But the next\ntime I talked to him, he said they'd decided to build their software\non Windows NT, and had just hired a very experienced NT developer\nto be their chief technical officer.  When I heard this, I thought,\nthese guys are doomed.  One, the CTO couldn't be a first rate\nhacker, because to become an eminent NT developer he would have\nhad to use NT voluntarily, multiple times, and I couldn't imagine\na great hacker doing that; and two, even if he was good, he'd have\na hard time hiring anyone good to work for him if the project had\nto be built on NT. [2]The Final FrontierAfter software, the most important tool to a hacker is probably\nhis office.  Big companies think the function of office space is to express\nrank.  But hackers use their offices for more than that: they\nuse their office as a place to think in.  And if you're a technology\ncompany, their thoughts are your product.  So making hackers work\nin a noisy, distracting environment is like having a paint factory\nwhere the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with\ngood reason.  All the hackers I know despise them.  The mere prospect\nof being interrupted is enough to prevent hackers from working on\nhard problems.  If you want to get real work done in an office with\ncubicles, you have two options: work at home, or come in early or\nlate or on a weekend, when no one else is there.  Don't companies\nrealize this is a sign that something is broken?  An office\nenvironment is supposed to be something that helps\nyou work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,\neven the CEO.  But they're not so advanced as they think; obviously\nthey still view office space as a badge of rank.  Note too that\nCisco is famous for doing very little product development in house.\nThey get new technology by buying the startups that created it-- where\npresumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.\nI once saw a recruiting ad for Microsoft with a big picture of a\ndoor.  Work for us, the premise was, and we'll give you a place to\nwork where you can actually get work done.   And you know, Microsoft\nis remarkable among big companies in that they are able to develop\nsoftware in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at\nwhat they do at home.  At home, hackers can arrange things themselves\nso they can get the most done.  And when they work at home, hackers\ndon't work in noisy, open spaces; they work in rooms with doors.  They\nwork in cosy, neighborhoody places with people around and somewhere\nto walk when they need to mull something over, instead of in glass\nboxes set in acres of parking lots.  They have a sofa they can take\na nap on when they feel tired, instead of sitting in a coma at\ntheir desk, pretending to work.  There's no crew of people with\nvacuum cleaners that roars through every evening during the prime\nhacking hours.  There are no meetings or, God forbid, corporate\nretreats or team-building exercises.  And when you look at what\nthey're doing on that computer, you'll find it reinforces what I\nsaid earlier about tools.  They may have to use Java and Windows\nat work, but at home, where they can choose for themselves, you're\nmore likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular\nlanguage can be misleading.  What we ought to look at, if we want\nto know what tools are best, is what hackers choose when they can\nchoose freely-- that is, in projects of their own.  When you ask\nthat question, you find that open source operating systems already\nhave a dominant market share, and the number one language is probably\nPerl.InterestingAlong with good tools, hackers want interesting projects.  What\nmakes a project interesting?  Well, obviously overtly sexy\napplications like stealth planes or special effects software would\nbe interesting to work on.  But any application can be interesting\nif it poses novel technical challenges.  So it's hard to predict\nwhich problems hackers will like, because some become\ninteresting only when the people working on them discover a new\nkind of solution.  Before ITA\n(who wrote the software inside Orbitz),\nthe people working on airline fare searches probably thought it\nwas one of the most boring applications imaginable.  But ITA made\nit interesting by \nredefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,\nthe conventional wisdom among the so-called portals was that search\nwas boring and unimportant.  But the guys at Google didn't think\nsearch was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent\nsaying to a child, I bet you can't clean up your whole room in\nten minutes, a good manager can sometimes redefine a problem as a\nmore interesting one.  Steve Jobs seems to be particularly good at\nthis, in part simply by having high standards.  There were a lot\nof small, inexpensive computers before the Mac.  He redefined the\nproblem as: make one that's beautiful.  And that probably drove\nthe developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't\neven have to turn it on to know it would be good; you could tell\nfrom the case.  A few weeks ago I was walking along the street in\nCambridge, and in someone's trash I saw what appeared to be a Mac\ncarrying case.  I looked inside, and there was a Mac SE.  I carried\nit home and plugged it in, and it booted.  The happy Macintosh\nface, and then the finder.  My God, it was so simple.  It was just\nlike ... Google.Hackers like to work for people with high standards.  But it's not\nenough just to be exacting.  You have to insist on the right things.\nWhich usually means that you have to be a hacker yourself.  I've\nseen occasional articles about how to manage programmers.  Really\nthere should be two articles: one about what to do if\nyou are yourself a programmer, and one about what to do if you're not.  And the \nsecond could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good\nhackers are practically self-managing.  The problem is, if you're\nnot a hacker, you can't tell who the good hackers are.  A similar\nproblem explains why American cars are so ugly.  I call it the\ndesign paradox.  You might think that you could make your products\nbeautiful just by hiring a great designer to design them.  But if\nyou yourself don't have good taste, \nhow are you going to recognize\na good designer?  By definition you can't tell from his portfolio.\nAnd you can't go by the awards he's won or the jobs he's had,\nbecause in design, as in most fields, those tend to be driven by\nfashion and schmoozing, with actual ability a distant third.\nThere's no way around it:  you can't manage a process intended to\nproduce beautiful things without knowing what beautiful is.  American\ncars are ugly because American car companies are run by people with\nbad taste.Many people in this country think of taste as something elusive,\nor even frivolous.  It is neither.  To drive design, a manager must\nbe the most demanding user of a company's products.  And if you\nhave really good tasteThe 5 best things to do in San Francisco are: 1) Go to Dolores Park. 2) Eat at Tony's Pizza Napoletana. 3) Visit Alcatraz. 4) Hike up Twin Peaks. 5) Bike across the Golden Gate Bridge\n Question: What are the 5 best things to do in San Franscisco? Don't give information outside the document or repeat your findings. Answer:"
]